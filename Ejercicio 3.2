package javaapplication11;

import java.util.Random;
import java.util.Scanner;

public class JavaApplication11 {

    public static double[] generarArreglo(int n) {
        double[] arr = new double[n];
        Random rand = new Random();
        for (int i = 0; i < n; i++) {
            arr[i] = rand.nextDouble() * 1000; // valores entre 0 y 1000
        }
        return arr;
    }

    public static void burbuja(double[] arr) {
        int n = arr.length;
        for (int i = 0; i < n - 1; i++) {
            for (int j = 0; j < n - i - 1; j++) {
                if (arr[j] > arr[j + 1]) {
                    double temp = arr[j];
                    arr[j] = arr[j + 1];
                    arr[j + 1] = temp;
                }
            }
        }
    }

    public static void insercion(double[] arr) {
        for (int i = 1; i < arr.length; i++) {
            double key = arr[i];
            int j = i - 1;
            while (j >= 0 && arr[j] > key) {
                arr[j + 1] = arr[j];
                j = j - 1;
            }
            arr[j + 1] = key;
        }
    }

    public static void seleccion(double[] arr) {
        for (int i = 0; i < arr.length - 1; i++) {
            int minIdx = i;
            for (int j = i + 1; j < arr.length; j++) {
                if (arr[j] < arr[minIdx]) {
                    minIdx = j;
                }
            }
            double temp = arr[minIdx];
            arr[minIdx] = arr[i];
            arr[i] = temp;
        }
    }

    public static void mergeSort(double[] arr, int izq, int der) {
        if (izq < der) {
            int mid = (izq + der) / 2;
            mergeSort(arr, izq, mid);
            mergeSort(arr, mid + 1, der);
            merge(arr, izq, mid, der);
        }
    }

    private static void merge(double[] arr, int izq, int mid, int der) {
        int n1 = mid - izq + 1;
        int n2 = der - mid;

        double[] L = new double[n1];
        double[] R = new double[n2];

        for (int i = 0; i < n1; i++)
            L[i] = arr[izq + i];
        for (int j = 0; j < n2; j++)
            R[j] = arr[mid + 1 + j];

        int i = 0, j = 0;
        int k = izq;
        while (i < n1 && j < n2) {
            if (L[i] <= R[j]) {
                arr[k] = L[i];
                i++;
            } else {
                arr[k] = R[j];
                j++;
            }
            k++;
        }
        while (i < n1) {
            arr[k] = L[i];
            i++;
            k++;
        }
        while (j < n2) {
            arr[k] = R[j];
            j++;
            k++;
        }
    }


    public static long medirTiempo(Runnable metodo) {
        long inicio = System.nanoTime();
        metodo.run();
        long fin = System.nanoTime();
        return (fin - inicio) / 1000000; // en milisegundos
    }


    public static void ejecutarComparacion() {
        int[] tamanios = {100, 500, 1000, 5000, 10000};

        System.out.printf("%-10s %-12s %-12s %-12s %-12s\n", "Tamaño", "Burbuja(ms)", "Inserción(ms)", "Selección(ms)", "MergeSort(ms)");
        System.out.println("----------------------------------------------------------------------------");

        for (int n : tamanios) {
            double[] arr = generarArreglo(n);

            double[] arr1 = arr.clone();
            double[] arr2 = arr.clone();
            double[] arr3 = arr.clone();
            double[] arr4 = arr.clone();

            long t1 = medirTiempo(() -> burbuja(arr1));
            long t2 = medirTiempo(() -> insercion(arr2));
            long t3 = medirTiempo(() -> seleccion(arr3));
            long t4 = medirTiempo(() -> mergeSort(arr4, 0, arr4.length - 1));

            System.out.printf("%-10d %-12d %-12d %-12d %-12d\n", n, t1, t2, t3, t4);
        }
    }

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int opcion;

        do {
            System.out.println("\n===== MENU PRINCIPAL =====");
            System.out.println("1. Ejecutar Punto 3.2 (Comparación de Metodos de Ordenamiento)");
            System.out.println("0. Salir");
            System.out.print("Seleccione una opcion: ");
            opcion = sc.nextInt();

            switch (opcion) {
                case 1:
                    ejecutarComparacion();
                    break;
                case 0:
                    System.out.println("Saliendo del programa...");
                    break;
                default:
                    System.out.println("Opción invalida.");
            }

        } while (opcion != 0);

        sc.close();
    }
}
